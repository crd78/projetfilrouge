version: '3'

services:
  # Ajout du service nginx comme load balancer
  nginx:
    image: nginx:alpine
    ports:
      - "8000:80"  # Port principal pour les requêtes externes
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - .:/app  # Pour accéder aux fichiers statiques
    depends_on:
      - web1
      - web2
      - web3

  # Renommage du service web existant en web1
  web1:
    build: .
    ports:
      - "8001:8000"  # Port différent pour éviter les conflits
    volumes:
      - .:/app
    environment:
      - DEBUG=True
      - DOCKER_CONTAINER=1
      - SERVER_ID=1  # ID unique pour identifier cette instance
    depends_on:
      - db
    command: >
      sh -c "
      echo 'Attente du démarrage de la base de données...' &&
      sleep 10 &&
      echo 'Démarrage du serveur Django (instance 1)...' &&
      gunicorn --bind 0.0.0.0:8000 django_project.wsgi:application"

  # Ajout de web2 (clone de web1 avec un ID différent)
  web2:
    build: .
    ports:
      - "8002:8000"  # Port différent pour éviter les conflits
    volumes:
      - .:/app
    environment:
      - DEBUG=True
      - DOCKER_CONTAINER=1
      - SERVER_ID=2  # ID unique pour identifier cette instance
    depends_on:
      - db
    command: >
      sh -c "
      echo 'Attente du démarrage de la base de données...' &&
      sleep 10 &&
      echo 'Démarrage du serveur Django (instance 2)...' &&
      gunicorn --bind 0.0.0.0:8000 django_project.wsgi:application"

  # Ajout de web3 (clone de web1 avec un ID différent)
  web3:
    build: .
    ports:
      - "8003:8000"  # Port différent pour éviter les conflits
    volumes:
      - .:/app
    environment:
      - DEBUG=True
      - DOCKER_CONTAINER=1
      - SERVER_ID=3  # ID unique pour identifier cette instance
    depends_on:
      - db
    command: >
      sh -c "
      echo 'Attente du démarrage de la base de données...' &&
      sleep 10 &&
      echo 'Démarrage du serveur Django (instance 3)...' &&
      gunicorn --bind 0.0.0.0:8000 django_project.wsgi:application"

  db-setup:
    build: .
    volumes:
      - .:/app
    environment:
      - DOCKER_CONTAINER=1
    depends_on:
      - db
    command: >
      sh -c "
      echo 'Attente et configuration de la base de données...' &&
      sleep 20 &&
      python recreate_db.py &&
      python manage.py migrate &&
      echo 'Configuration de la base de données terminée!'"
  
  db:
    image: mysql:8.0
    ports:
      - "3307:3306"  # 3307 sur hôte, 3306 dans conteneur
    environment:
      - MYSQL_ALLOW_EMPTY_PASSWORD=yes
      - MYSQL_DATABASE=django_api_db
    volumes:
      - mysql_data:/var/lib/mysql
    command: --default-authentication-plugin=mysql_native_password

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    ports:
      - "8081:80"
    environment:
      - PMA_HOST=db
      - PMA_PORT=3306
    depends_on:
      - db

volumes:
  mysql_data: